

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (17 May 2021 21:18:23) as /Users/dbenitez/uba/1c2021-IS1/Quiz/macos64 - Portfolio 1/CuisUniversity-4532.image!


----End fileIn of /Users/dbenitez/uba/1c2021-IS1/IS1-TP-1c2021/17-Portfolio 1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:19:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:19:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:19:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 5/17/2021 21:19:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 5/17/2021 21:19:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 5/17/2021 21:19:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 5/17/2021 21:19:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:19:16'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 5/17/2021 21:20:30' prior: 50859548!
balance

	^transactions sum: [ :aTransaction | | value | 
			(aTransaction isKindOf: Withdraw) ifTrue: [ value := (aTransaction value)*(-1)].
		(aTransaction isKindOf: Deposit) ifTrue: [value := aTransaction value].
		
		value.
		
		
		aTransaction value ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:20:34'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 5/17/2021 21:21:02' prior: 50859592!
balance

	^transactions sum: [ :aTransaction | | value | 
			(aTransaction isKindOf: Withdraw) ifTrue: [ value := (aTransaction value)*(-1)].
		(aTransaction isKindOf: Deposit) ifTrue: [value := aTransaction value].

		value. ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 5/17/2021 21:21:11' prior: 50859608!
balance

	^transactions sum: [ :aTransaction | | value | 
		(aTransaction isKindOf: Withdraw) ifTrue: [ value := (aTransaction value)*(-1)].
		(aTransaction isKindOf: Deposit) ifTrue: [value := aTransaction value].
		value. 
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:21:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 5/17/2021 21:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 5/17/2021 21:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 5/17/2021 21:21:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 5/17/2021 21:21:14'!
PASSED!
!Deposit methodsFor: 'initialization' stamp: 'DB 5/17/2021 21:21:40'!
xxx: aBalance

	 ^aBalance + value! !
!Withdraw methodsFor: 'initialization' stamp: 'DB 5/17/2021 21:22:03'!
xxx: aBalance
	^aBalance - value! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 5/17/2021 21:22:56' prior: 50859619!
balance

	|balance|
	balance := 0.
	transactions do: [:aTransaction |  balance := aTransaction xxx: balance].
	^balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:23:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:23:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:23:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 5/17/2021 21:23:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 5/17/2021 21:23:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 5/17/2021 21:23:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 5/17/2021 21:23:00'!
PASSED!
!Deposit methodsFor: 'initialization' stamp: 'DB 5/17/2021 21:23:15'!
addTo: aBalance

	 ^aBalance + value! !

!methodRemoval: Deposit #xxx: stamp: 'DB 5/17/2021 21:23:15'!
xxx: aBalance

	 ^aBalance + value!
!Withdraw methodsFor: 'initialization' stamp: 'DB 5/17/2021 21:23:32'!
addTo: aBalance
	^aBalance - value! !

!methodRemoval: Withdraw #xxx: stamp: 'DB 5/17/2021 21:23:32'!
xxx: aBalance
	^aBalance - value!
!AccountTransaction methodsFor: 'value' stamp: 'DB 5/17/2021 21:23:41'!
addTo: Balance

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 5/17/2021 21:23:56' prior: 50859667!
balance

	|balance|
	balance := 0.
	transactions do: [:aTransaction |  balance := aTransaction addTo: balance].
	^balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 5/17/2021 21:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 5/17/2021 21:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 5/17/2021 21:24:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 5/17/2021 21:24:02'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{33 to: 33})
		cover: (22 to: 28)
		declaredAt: (12 to: 18).
	[
	(transactions
		cover: (37 to: 48)
		declaredAt: (37 to: 48)) do: [ :aTransaction |
		(balance _ [
		(aTransaction
			cover: (83 to: 94)
			declaredAt: (56 to: 67)) addTo:
			(balance
				cover: (72 to: 78)
				declaredAt: (12 to: 18)) ] valueCoveringAll:
			{96 to: 101})
			cover: (103 to: 109)
			declaredAt: (12 to: 18) ]] valueCoveringAll:
		{50 to: 52}.
	^ balance
		cover: (115 to: 121)
		declaredAt: (12 to: 18).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:24:06'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addTo: aBalance
	^ [
	(aBalance
		cover: (21 to: 28)
		declaredAt: (8 to: 15)) +
		(value
			cover: (32 to: 36)
			declaredAt: (32 to: 36)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:24:06'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
addTo: aBalance
	^ [
	(aBalance
		cover: (19 to: 26)
		declaredAt: (8 to: 15)) -
		(value
			cover: (30 to: 34)
			declaredAt: (30 to: 34)) ] valueCoveringAll:
		{28 to: 28}.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:24:06'!
PASSED!
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 5/17/2021 21:24:06'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 5/17/2021 21:24:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 5/17/2021 21:24:06'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 5/17/2021 21:24:06'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'DB 5/17/2021 21:24:23'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 5/17/2021 21:24:40'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'DB 5/17/2021 21:24:34'!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:24:41'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:24:50'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:24:56' prior: 50859908!
balance
	^0! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:24:57'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:24:57'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:25:11'!
test02APortfolioWithAnAccountHasTheSameBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account. 
	
	portfolio add: account.

	self assert: 100 equals: (portfolio balance).
! !

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 21:25:12'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:25:19'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 5/17/2021 21:25:39'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:25:37' prior: 50859937!
add: aReceptiveAccount 
	accounts add: aReceptiveAccount! !

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 21:25:41'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:26:01' overrides: 16896425!
initialize
	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:26:03'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 21:26:03'!
FAILURE!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 21:26:03'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:26:36' prior: 50859913!
balance
	^accounts sum: [:anAccount | anAccount balance] ifEmpty: [^0]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:26:39'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 21:26:39'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:26:55'!
test03

	| portfolio child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account. 

	child add: account.	
	portfolio add: child.

	self assert: 100 equals: (portfolio balance).

! !

!testRun: #PortfolioTest #test03 stamp: 'DB 5/17/2021 21:27:03'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:27:03'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 21:27:03'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/17/2021 21:27:03'!
PASSED!

Object subclass: #Asset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'DB 5/17/2021 21:27:21'!
Object subclass: #Asset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Asset subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 5/17/2021 21:27:26'!
Asset subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Asset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DB 5/17/2021 21:27:31'!
Asset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:27:36'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 21:27:36'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/17/2021 21:27:36'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (13 to: 20)
		declaredAt: (13 to: 20).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (11 to: 18)
		declaredAt: (11 to: 18))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (39 to: 47)
				declaredAt: (27 to: 35)) balance ] valueCoveringAll:
				{49 to: 55} ]
		ifEmpty: [ ^ 0 coverAll:
				{69 to: 69} ]] valueCoveringAll:
		{20 to: 23. 58 to: 65}.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:27:40'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
add: aReceptiveAccount
	[
	(accounts
		cover: (26 to: 33)
		declaredAt: (26 to: 33)) add:
		(aReceptiveAccount
			cover: (40 to: 56)
			declaredAt: (6 to: 22)) ] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{33 to: 33})
		cover: (22 to: 28)
		declaredAt: (12 to: 18).
	[
	(transactions
		cover: (37 to: 48)
		declaredAt: (37 to: 48)) do: [ :aTransaction |
		(balance _ [
		(aTransaction
			cover: (83 to: 94)
			declaredAt: (56 to: 67)) addTo:
			(balance
				cover: (72 to: 78)
				declaredAt: (12 to: 18)) ] valueCoveringAll:
			{96 to: 101})
			cover: (103 to: 109)
			declaredAt: (12 to: 18) ]] valueCoveringAll:
		{50 to: 52}.
	^ balance
		cover: (115 to: 121)
		declaredAt: (12 to: 18).! !
!Behavior method!
addTo: aBalance
	^ [
	(aBalance
		cover: (21 to: 28)
		declaredAt: (8 to: 15)) +
		(value
			cover: (32 to: 36)
			declaredAt: (32 to: 36)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 21:27:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/17/2021 21:27:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:28:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:28:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/17/2021 21:28:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 5/17/2021 21:28:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 5/17/2021 21:28:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 5/17/2021 21:28:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 5/17/2021 21:28:03'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:28:05'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 21:28:05'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/17/2021 21:28:05'!
PASSED!
!Withdraw methodsFor: 'initialization' stamp: 'DB 5/17/2021 21:28:38' prior: 50859707 overrides: 50859714!
addTo: aBalance

	^aBalance - value! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:29:26' prior: 50859986!
test03

	| portfolio child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account. 

	child add: account.	
	portfolio add: child.

	self assert: 100 equals: (portfolio balance).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:37:24' prior: 50860196!
test03

	| portfolio child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account. 

	child add: account.	
	portfolio add: child.

	self assert: 100 equals: (portfolio balance).
	
	"0 one many altura del arbol"

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:37:44' prior: 50860208!
test03

	| portfolio child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account. 

	child add: account.	
	portfolio add: child.

	self assert: 100 equals: (portfolio balance).
	
	"0 one many altura del arbol
	"

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:39:01' prior: 50860221!
test03

	| portfolio child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account. 

	child add: account.	
	portfolio add: child.

	self assert: 100 equals: (portfolio balance).

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:43:51' prior: 50859974!
balance
	^accounts sum: [:anAsset | anAsset balance] ifEmpty: [^0]! !
!Asset methodsFor: 'nil' stamp: 'DB 5/17/2021 21:44:20'!
balance
	self subclassResponsibility ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:50:38'!
test04EmptyPortfolioHaveNotAnyTransaction

	| portfolio child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account. 

	child add: account.	
	portfolio add: child.

	self assert: 100 equals: (portfolio balance).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:52:43' prior: 50860254!
test04EmptyPortfolioHaveNotAnyTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.

	self assert: 100 equals: (portfolio hasRegistered: deposit).

! !

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/17/2021 21:54:20'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:54:31'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:54:47' prior: 50860281!
hasRegistered: aDeposit 
	^false! !

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/17/2021 21:54:49'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:55:03' prior: 50860267!
test04EmptyPortfolioHaveNotAnyTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.

	self assert: (portfolio hasRegistered: deposit).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:55:29' prior: 50860294!
test04EmptyPortfolioHaveNotAnyTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.

	self deny: (portfolio hasRegistered: deposit).

! !

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/17/2021 21:55:30'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 21:55:30'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 21:55:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/17/2021 21:55:30'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/17/2021 21:55:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:56:04'!
test05PortfolioWithAnReceptiveAccountHaveAccountTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.

	self deny: (portfolio hasRegistered: deposit).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:56:13' prior: 50860332!
test05PortfolioWithAnReceptiveAccountHaveAccountTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.

	self deny: (portfolio hasRegistered: deposit).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:56:21' prior: 50860344!
test05PortfolioWithAnReceptiveAccountHaveAccountTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.

	self assert: (portfolio hasRegistered: deposit).

! !

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/17/2021 21:56:23'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 21:59:37' prior: 50860286!
hasRegistered: aTransaction

	^accounts do: [:account | (account hasRegistered: aTransaction) ifTrue: [^true]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/17/2021 22:00:30' prior: 50860372!
hasRegistered: aTransaction

	^accounts anySatisfy: [:account | (account hasRegistered: aTransaction)].! !

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/17/2021 22:00:31'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 22:00:31'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 22:00:31'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/17/2021 22:00:31'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/17/2021 22:00:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/17/2021 22:00:31'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/17/2021 22:00:40'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/17/2021 22:00:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/17/2021 22:00:40'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/17/2021 22:00:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/17/2021 22:00:40'!
PASSED!

----SNAPSHOT----(17 May 2021 22:11:08) CuisUniversity-4532.image priorSource: 16885703!

----QUIT----(17 May 2021 22:11:11) CuisUniversity-4532.image priorSource: 16920695!

----STARTUP---- (20 May 2021 19:51:25) as /Users/dbenitez/uba/1c2021-IS1/Quiz/macos64 - Portfolio 1/CuisUniversity-4532.image!

!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (13 to: 20)
		declaredAt: (13 to: 20).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (11 to: 18)
		declaredAt: (11 to: 18))
		sum: [ :anAsset |
			[
			(anAsset
				cover: (37 to: 43)
				declaredAt: (27 to: 33)) balance ] valueCoveringAll:
				{45 to: 51} ]
		ifEmpty: [ ^ 0 coverAll:
				{65 to: 65} ]] valueCoveringAll:
		{20 to: 23. 54 to: 61}.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 20:03:37'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
add: aReceptiveAccount
	[
	(accounts
		cover: (26 to: 33)
		declaredAt: (26 to: 33)) add:
		(aReceptiveAccount
			cover: (40 to: 56)
			declaredAt: (6 to: 22)) ] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{33 to: 33})
		cover: (22 to: 28)
		declaredAt: (12 to: 18).
	[
	(transactions
		cover: (37 to: 48)
		declaredAt: (37 to: 48)) do: [ :aTransaction |
		(balance _ [
		(aTransaction
			cover: (83 to: 94)
			declaredAt: (56 to: 67)) addTo:
			(balance
				cover: (72 to: 78)
				declaredAt: (12 to: 18)) ] valueCoveringAll:
			{96 to: 101})
			cover: (103 to: 109)
			declaredAt: (12 to: 18) ]] valueCoveringAll:
		{50 to: 52}.
	^ balance
		cover: (115 to: 121)
		declaredAt: (12 to: 18).! !
!Behavior method!
addTo: aBalance
	^ [
	(aBalance
		cover: (21 to: 28)
		declaredAt: (8 to: 15)) +
		(value
			cover: (32 to: 36)
			declaredAt: (32 to: 36)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 20:03:37'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 20:03:37'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :account |
		[
		(account
			cover: (66 to: 72)
			declaredAt: (55 to: 61)) hasRegistered:
			(aTransaction
				cover: (89 to: 100)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{74 to: 87} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 20:03:37'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 20:03:37'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (13 to: 20)
		declaredAt: (13 to: 20).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (11 to: 18)
		declaredAt: (11 to: 18))
		sum: [ :anAsset |
			[
			(anAsset
				cover: (37 to: 43)
				declaredAt: (27 to: 33)) balance ] valueCoveringAll:
				{45 to: 51} ]
		ifEmpty: [ ^ 0 coverAll:
				{65 to: 65} ]] valueCoveringAll:
		{20 to: 23. 54 to: 61}.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 20:04:40'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
add: aReceptiveAccount
	[
	(accounts
		cover: (26 to: 33)
		declaredAt: (26 to: 33)) add:
		(aReceptiveAccount
			cover: (40 to: 56)
			declaredAt: (6 to: 22)) ] valueCoveringAll:
		{35 to: 38}.! !
!Behavior method!
balance
	| balance |
	(balance _ 0 coverAll:
		{33 to: 33})
		cover: (22 to: 28)
		declaredAt: (12 to: 18).
	[
	(transactions
		cover: (37 to: 48)
		declaredAt: (37 to: 48)) do: [ :aTransaction |
		(balance _ [
		(aTransaction
			cover: (83 to: 94)
			declaredAt: (56 to: 67)) addTo:
			(balance
				cover: (72 to: 78)
				declaredAt: (12 to: 18)) ] valueCoveringAll:
			{96 to: 101})
			cover: (103 to: 109)
			declaredAt: (12 to: 18) ]] valueCoveringAll:
		{50 to: 52}.
	^ balance
		cover: (115 to: 121)
		declaredAt: (12 to: 18).! !
!Behavior method!
addTo: aBalance
	^ [
	(aBalance
		cover: (21 to: 28)
		declaredAt: (8 to: 15)) +
		(value
			cover: (32 to: 36)
			declaredAt: (32 to: 36)) ] valueCoveringAll:
		{30 to: 30}.! !

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 20:04:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 20:04:40'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :account |
		[
		(account
			cover: (66 to: 72)
			declaredAt: (55 to: 61)) hasRegistered:
			(aTransaction
				cover: (89 to: 100)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{74 to: 87} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 20:04:40'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 20:04:40'!
PASSED!

----STARTUP---- (20 May 2021 20:08:57) as /Users/dbenitez/uba/1c2021-IS1/Quiz/macos64 - Portfolio 1/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:13:49'!
test06

	| portfolio account deposit child |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	child add: account.
	
	self assert: (portfolio hasRegistered: deposit).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:14:05' prior: 50860690!
test06

	| portfolio account deposit child |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	child add: account.
	portfolio add: child.
	
	self assert: (portfolio hasRegistered: deposit).

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:18:36' prior: 50860246 overrides: 50860250!
balance

	^accounts sum: [:anAsset | anAsset balance] ifEmpty: [^0]! !

----SNAPSHOT----(20 May 2021 20:20:09) CuisUniversity-4532.image priorSource: 16920784!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/20/2021 20:21:43'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:21:55'!
test07TransactionXXX

	| portfolio account deposit child |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	child add: account.
	portfolio add: child.
	
	self assert: (portfolio hasRegistered: deposit).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:22:16' prior: 50860725!
test07TransactionXXX

	| portfolio |
	
	portfolio := Portfolio new.
	
	
	self assert: (portfolio transactions).

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:22:43' prior: 50860738!
test07TransactionXXX

	| portfolio |
	
	portfolio := Portfolio new.
	
	
	self assert: (portfolio transactions) isEmpty.

! !

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:22:46'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'DB 5/20/2021 20:23:00'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 5/20/2021 20:23:16' prior: 50860754!
transactions
	^ OrderedCollection new! !

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:23:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 20:23:17'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 20:23:17'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 20:23:17'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 20:23:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 20:23:17'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/20/2021 20:23:17'!
PASSED!

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:23:17'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:23:29'!
test08TransactionOne

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:23:47' prior: 50860788!
test08TransactionOne

	| portfolio account child deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit register: 100 on: account.
	child add: account.
	portfolio add: child.
	
	self assert: (portfolio hasRegistered: deposit).
	
	self assert: (portfolio transactions) isEmpty.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:24:24' prior: 50860795!
test08TransactionOne

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	deposit := Deposit register: 100 on: account.

	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).
	
	self assert: (portfolio transactions) isEmpty.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:24:43' prior: 50860808!
test08TransactionOne

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.

	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).
	
	self assert: (portfolio transactions) isEmpty.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:24:52' prior: 50860745!
test07TransactionXXX

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:25:06' prior: 50860820!
test08TransactionOne

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.

	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).

! !

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:25:08'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 20:25:08'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 20:25:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 20:25:08'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 20:25:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 20:25:08'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/20/2021 20:25:08'!
PASSED!

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:25:08'!
PASSED!

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:25:08'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:25:33' prior: 50860840!
test08TransactionOne

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.

	portfolio add: account.
	
	self assert: (portfolio transactions) includes: deposit.

! !

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:25:36'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'DB 5/20/2021 20:26:39' prior: 50860759!
transactions
	^(accounts at: 0) transactions! !

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:26:40'!
ERROR!

(accounts at: 0)!
!Portfolio methodsFor: 'transactions' stamp: 'DB 5/20/2021 20:27:13' prior: 50860893!
transactions
	^(accounts at: 1) transactions! !

(accounts at: 1)!

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:27:20'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 20:27:20'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 20:27:20'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 20:27:20'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 20:27:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 20:27:20'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/20/2021 20:27:20'!
PASSED!

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:27:20'!
ERROR!

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:27:20'!
PASSED!

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:27:20'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'DB 5/20/2021 20:27:42' prior: 50860901!
transactions
	^(accounts first) transactions! !

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:27:43'!
ERROR!

accounts first!

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:28:16'!
ERROR!

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:28:26'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 20:28:26'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 20:28:26'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 20:28:26'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 20:28:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 20:28:26'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/20/2021 20:28:26'!
PASSED!

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:28:26'!
ERROR!

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:28:26'!
PASSED!

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:28:26'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'DB 5/20/2021 20:29:22' prior: 50860936!
transactions
	
	accounts size > 0 ifTrue: [	^(accounts first) transactions].
	^OrderedCollection new! !

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:29:24'!
PASSED!

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:29:29'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 20:29:29'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 20:29:29'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 20:29:29'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 20:29:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 20:29:29'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/20/2021 20:29:29'!
PASSED!

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:29:29'!
PASSED!

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:29:29'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:32:03'!
test09TransactionOne

	| portfolio account1 account2 deposit1 deposit2 portfolio1 portfolio2 |
	
	portfolio := Portfolio new.
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	deposit2 := Deposit register: 100 on: account2.

	portfolio add: portfolio1.
	portfolio add: portfolio2.
	
	self assert: (portfolio transactions) includes: deposit1.
	self assert: (portfolio transactions) includes: deposit2.

! !

!testRun: #PortfolioTest #test09TransactionOne stamp: 'DB 5/20/2021 20:32:07'!
FAILURE!

----SNAPSHOT----(20 May 2021 20:33:29) CuisUniversity-4532.image priorSource: 16930214!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/20/2021 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:33:34'!
PASSED!

!testRun: #PortfolioTest #test09TransactionOne stamp: 'DB 5/20/2021 20:33:34'!
FAILURE!

!testRun: #PortfolioTest #test09TransactionOne stamp: 'DB 5/20/2021 20:33:34'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'DB 5/20/2021 20:35:01' prior: 50860977!
transactions
	
	| transactions |
	transactions := OrderedCollection new.
	accounts do: [	:asset | transactions addAll: asset transactions].
	^transactions! !

!testRun: #PortfolioTest #test09TransactionOne stamp: 'DB 5/20/2021 20:35:02'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:36:29' prior: 50861013!
test09TransactionOne

	| portfolio account1 account2 deposit1 deposit2 portfolio1 portfolio2 |
	
	portfolio := Portfolio new.
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	portfolio1 add: account1.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	deposit2 := Deposit register: 100 on: account2.
	portfolio2 add: account2.

	portfolio add: portfolio1.
	portfolio add: portfolio2.
	
	self assert: (portfolio transactions) includes: deposit1.
	self assert: (portfolio transactions) includes: deposit2.

! !

!testRun: #PortfolioTest #test09TransactionOne stamp: 'DB 5/20/2021 20:36:32'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 20:36:34'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 20:36:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 20:36:34'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 20:36:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 20:36:34'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/20/2021 20:36:34'!
PASSED!

!testRun: #PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:36:34'!
PASSED!

!testRun: #PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:36:34'!
PASSED!

!testRun: #PortfolioTest #test09TransactionOne stamp: 'DB 5/20/2021 20:36:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:36:59'!
test09TransactionMany

	| portfolio account1 account2 deposit1 deposit2 portfolio1 portfolio2 |
	
	portfolio := Portfolio new.
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	portfolio1 add: account1.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	deposit2 := Deposit register: 100 on: account2.
	portfolio2 add: account2.

	portfolio add: portfolio1.
	portfolio add: portfolio2.
	
	self assert: (portfolio transactions) includes: deposit1.
	self assert: (portfolio transactions) includes: deposit2.

! !

!methodRemoval: PortfolioTest #test09TransactionOne stamp: 'DB 5/20/2021 20:36:59'!
test09TransactionOne

	| portfolio account1 account2 deposit1 deposit2 portfolio1 portfolio2 |
	
	portfolio := Portfolio new.
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	portfolio1 add: account1.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	deposit2 := Deposit register: 100 on: account2.
	portfolio2 add: account2.

	portfolio add: portfolio1.
	portfolio add: portfolio2.
	
	self assert: (portfolio transactions) includes: deposit1.
	self assert: (portfolio transactions) includes: deposit2.

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:38:06'!
test07EmptyPortfolioReturnsEmptyTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.

! !

!methodRemoval: PortfolioTest #test07TransactionXXX stamp: 'DB 5/20/2021 20:38:06'!
test07TransactionXXX

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions) isEmpty.

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:38:53'!
test08PortfolioWithAnAccountIncludesDepositTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.

	portfolio add: account.
	
	self assert: (portfolio transactions) includes: deposit.

! !

!methodRemoval: PortfolioTest #test08TransactionOne stamp: 'DB 5/20/2021 20:38:54'!
test08TransactionOne

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.

	portfolio add: account.
	
	self assert: (portfolio transactions) includes: deposit.

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:40:21'!
test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions

	| portfolio account1 account2 deposit1 deposit2 portfolio1 portfolio2 |
	
	portfolio := Portfolio new.
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	portfolio1 add: account1.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	deposit2 := Deposit register: 100 on: account2.
	portfolio2 add: account2.

	portfolio add: portfolio1.
	portfolio add: portfolio2.
	
	self assert: (portfolio transactions) includes: deposit1.
	self assert: (portfolio transactions) includes: deposit2.

! !

!methodRemoval: PortfolioTest #test09TransactionMany stamp: 'DB 5/20/2021 20:40:21'!
test09TransactionMany

	| portfolio account1 account2 deposit1 deposit2 portfolio1 portfolio2 |
	
	portfolio := Portfolio new.
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	portfolio1 add: account1.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	deposit2 := Deposit register: 100 on: account2.
	portfolio2 add: account2.

	portfolio add: portfolio1.
	portfolio add: portfolio2.
	
	self assert: (portfolio transactions) includes: deposit1.
	self assert: (portfolio transactions) includes: deposit2.

!

----SNAPSHOT----(20 May 2021 20:44:21) CuisUniversity-4532.image priorSource: 16940308!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:45:30'!
test10

	| portfolio account1 account2 deposit1 deposit2 portfolio1 portfolio2 |
	
	portfolio := Portfolio new.
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	portfolio1 add: account1.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	deposit2 := Deposit register: 100 on: account2.
	portfolio2 add: account2.

	portfolio add: portfolio1.
	portfolio add: portfolio2.
	
	self assert: (portfolio transactions) includes: deposit1.
	self assert: (portfolio transactions) includes: deposit2.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:48:02' prior: 50861259!
test10

	| p1 a1 d2 a2 |
	
	p1 := Portfolio new.
	
	a1 := ReceptiveAccount new.
	Deposit register: 100 on: a1.
	
	p1 add: a1.

	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	self deny a1 = a2
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:48:08' prior: 50861281!
test10

	| p1 a1 a2 |
	
	p1 := Portfolio new.
	
	a1 := ReceptiveAccount new.
	Deposit register: 100 on: a1.
	
	p1 add: a1.

	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	self deny: a1 = a2
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:48:28' prior: 50861291!
test10

	| a1 a2 |
	
	
	
	a1 := ReceptiveAccount new.
	Deposit register: 100 on: a1.
	


	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	self deny: a1 = a2
! !

!testRun: #PortfolioTest #test10 stamp: 'DB 5/20/2021 20:48:29'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 20:48:29'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 20:48:29'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/20/2021 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/20/2021 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/20/2021 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/20/2021 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'DB 5/20/2021 20:48:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:48:37' prior: 50861301!
test10

	| a1 a2 |
		
	a1 := ReceptiveAccount new.
	Deposit register: 100 on: a1.
	
	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	self deny: a1 = a2
! !

!testRun: #PortfolioTest #test10 stamp: 'DB 5/20/2021 20:50:23'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:55:47' prior: 50861175!
test07EmptyPortfolioReturnsEmptyTransactions
	
	self assert: (Portfolio new transactions) isEmpty.

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:56:57' prior: 50861345!
test10

	| a1 a2 |
		
	a1 := ReceptiveAccount new.
	Deposit register: 100 on: a1.
	
	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	self deny a1 = a2
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 20:58:02'!
test10APortfolioWithAnAccountCannotAddTheSameAccount

	| a1 a2 |
		
	a1 := ReceptiveAccount new.
	Deposit register: 100 on: a1.
	
	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	self deny a1 = a2
! !

!methodRemoval: PortfolioTest #test10 stamp: 'DB 5/20/2021 20:58:02'!
test10

	| a1 a2 |
		
	a1 := ReceptiveAccount new.
	Deposit register: 100 on: a1.
	
	a2 := ReceptiveAccount new.
	Deposit register: 100 on: a2.
	
	self deny a1 = a2
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 21:01:04' prior: 50861371!
test10APortfolioWithAnAccountCannotAddTheSameAccount

	| portfolio account |
		
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self 
		should: [portfolio add: account] 
		raise: Error 
		withErrorDescription: [Portfolio cannotAddAccountErrorDescription].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 21:02:18' prior: 50861389!
test10APortfolioWithAnAccountCannotAddTheSameAccount

	| portfolio account |
		
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self should: [portfolio add: account ] raise: Error  withMessageText: Portfolio cannotAddAccountErrorDescription.	
		! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 21:02:28' prior: 50861403!
test10APortfolioWithAnAccountCannotAddTheSameAccount

	| portfolio account |
		
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self should: [portfolio add: account ] raise: Error  withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test10APortfolioWithAnAccountCannotAddTheSameAccount stamp: 'DB 5/20/2021 21:02:32'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 21:03:35' prior: 50859949!
add: aReceptiveAccount 


	(accounts includes: aReceptiveAccount) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	accounts add: aReceptiveAccount! !

!testRun: #PortfolioTest #test10APortfolioWithAnAccountCannotAddTheSameAccount stamp: 'DB 5/20/2021 21:03:37'!
ERROR!
!Portfolio class methodsFor: 'error' stamp: 'DB 5/20/2021 21:03:58'!
cannotAddAccountErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'error' stamp: 'DB 5/20/2021 21:04:13' prior: 50861447!
cannotAddAccountErrorDescription
	^'cannot add account'! !

!testRun: #PortfolioTest #test10APortfolioWithAnAccountCannotAddTheSameAccount stamp: 'DB 5/20/2021 21:04:14'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 21:04:36' prior: 50861417!
test10APortfolioWithAnAccountCannotAddTheSameAccount

	| portfolio account |
		
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self should: [portfolio add: account ] raise: Error - MessageNotUnderstood withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test10APortfolioWithAnAccountCannotAddTheSameAccount stamp: 'DB 5/20/2021 21:04:37'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 21:04:37'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 21:04:37'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 21:04:37'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 21:04:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 21:04:37'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/20/2021 21:04:37'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/20/2021 21:04:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/20/2021 21:04:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/20/2021 21:04:37'!
PASSED!

!testRun: #PortfolioTest #test10APortfolioWithAnAccountCannotAddTheSameAccount stamp: 'DB 5/20/2021 21:04:37'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 21:04:56' prior: 50861461!
test10APortfolioWithAnAccountCannotAddTheSameAccount

	| portfolio account |
		
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self 
		should: [portfolio add: account ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 21:05:02' prior: 50861514!
test10APortfolioWithAnAccountCannotAddTheSameAccount

	| portfolio account |
		
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self 
		should: [portfolio add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test10APortfolioWithAnAccountCannotAddTheSameAccount stamp: 'DB 5/20/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/20/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/20/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/20/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/20/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/20/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/20/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/20/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/20/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/20/2021 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test10APortfolioWithAnAccountCannotAddTheSameAccount stamp: 'DB 5/20/2021 21:05:04'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 5/20/2021 21:06:32' prior: 50861529!
test10APortfolioWithAnAccountCannotAddTheSameAccount

	| portfolio account |
		
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self 
		should: [portfolio add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

----QUIT----(21 May 2021 10:04:24) CuisUniversity-4532.image priorSource: 16947364!

----STARTUP---- (23 May 2021 18:40:12) as /Users/dbenitez/uba/1c2021-IS1/Quiz/macos64 - Portfolio 1/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 18:43:36'!
test10CannotAddSameAccountTwice

	| portfolio account |
		
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self 
		should: [portfolio add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!methodRemoval: PortfolioTest #test10APortfolioWithAnAccountCannotAddTheSameAccount stamp: 'DB 5/23/2021 18:43:36'!
test10APortfolioWithAnAccountCannotAddTheSameAccount

	| portfolio account |
		
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self 
		should: [portfolio add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 18:43:54'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 18:43:59'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 18:43:59'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 18:43:59'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 18:43:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 18:43:59'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 18:43:59'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 18:43:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 18:43:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 18:43:59'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 18:43:59'!
PASSED!
!Asset methodsFor: 'testing' stamp: 'DB 5/23/2021 18:46:52'!
hasRegistered: aTransaction
	self subclassResponsibility ! !
!Asset methodsFor: 'testing' stamp: 'DB 5/23/2021 18:48:13'!
transactions

	self subclassResponsibility ! !
!Portfolio methodsFor: 'initialization' stamp: 'DB 5/23/2021 18:50:27' prior: 50859958 overrides: 16896425!
initialize

	accounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 18:50:52'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 18:50:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 18:50:52'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 18:50:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 18:50:52'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 18:50:52'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 18:50:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 18:50:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 18:50:52'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 18:50:52'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 18:54:45' prior: 50861435!
add: aReceptiveAccount 

	(accounts includes: aReceptiveAccount) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	accounts add: aReceptiveAccount! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 18:54:52'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 18:54:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 18:54:52'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 18:54:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 18:54:52'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 18:54:52'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 18:54:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 18:54:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 18:54:52'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 18:54:52'!
PASSED!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 18:58:18'!
test11

	| portfolio1 account1 portfolio2 |
		
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	portfolio1 add: account1.
	
	portfolio2 := Portfolio new.
	
	
	self 
		should: [portfolio2 add: portfolio1 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 18:58:59' prior: 50861753!
test11

	| portfolio1 portfolio2 account  |
		
	portfolio1 := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio1 add: account.
	
	portfolio2 := Portfolio new.
	portfolio2 add: account.
		
	self 
		should: [portfolio2 add: portfolio1 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test11 stamp: 'DB 5/23/2021 19:04:21'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'DB 5/23/2021 19:16:02'!
FAILURE!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 19:16:38' prior: 50861767!
test11

	| portfolio1 portfolio2   |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2 .
		
	self 
		should: [portfolio2 add: portfolio1 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test11 stamp: 'DB 5/23/2021 19:16:39'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:17:17' prior: 50861711!
add: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	
	accounts add: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:17:22' prior: 50861801!
add: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test11 stamp: 'DB 5/23/2021 19:17:28'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:21:08' prior: 50861808!
add: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(anAsset includes: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test11 stamp: 'DB 5/23/2021 19:21:10'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:22:01'!
includes: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(anAsset includes: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:22:06' prior: 50861830!
includes: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:22:33' prior: 50861841!
includes: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 19:22:35'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 19:22:35'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 19:22:35'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 19:22:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 19:22:35'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 19:22:35'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 19:22:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 19:22:35'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 19:22:35'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 19:22:35'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'DB 5/23/2021 19:22:35'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 19:24:47'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 19:24:47'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 19:24:47'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 19:24:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 19:24:47'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 19:24:47'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 19:24:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 19:24:47'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 19:24:47'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 19:24:47'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'DB 5/23/2021 19:24:47'!
ERROR!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 19:24:49'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/23/2021 19:25:41'!
includes: anAsset

	^self = anAsset! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 19:25:44'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 19:25:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 19:25:44'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 19:25:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 19:25:44'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 19:25:44'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 19:25:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 19:25:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 19:25:44'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 19:25:44'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'DB 5/23/2021 19:25:44'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 19:25:48'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 19:26:31'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 19:27:17'!
ERROR!

(accounts includes: anAsset)!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:27:58' prior: 50861848!
includes: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].! !

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 19:28:06'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:28:40' prior: 50861977!
includes: anAsset 

	^(accounts includes: anAsset) ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 19:28:44'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 19:28:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 19:28:44'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 19:28:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 19:28:44'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 19:28:44'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 19:28:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 19:28:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 19:28:44'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 19:28:44'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'DB 5/23/2021 19:28:44'!
PASSED!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 19:30:07'!
test11CyclesCannotBeGenerated

	| portfolio1 portfolio2   |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2 .
		
	self 
		should: [portfolio2 add: portfolio1 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!methodRemoval: PortfolioTest #test11 stamp: 'DB 5/23/2021 19:30:07'!
test11

	| portfolio1 portfolio2   |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2 .
		
	self 
		should: [portfolio2 add: portfolio1 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 19:30:36'!
test12

	| portfolio1 portfolio2 |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	portfolio1 add: portfolio2 .
		
	self 
		should: [portfolio2 add: portfolio1 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 19:32:03' prior: 50862050!
test12

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.

	portfolio1 add: account.
	portfolio2 add: account.
		
	self 
		should: [portfolio1 add: portfolio2 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 19:32:05'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:47:23' prior: 50861986!
includes: anAsset 

	^accounts do: [:account | (account includes: anAsset) ifTrue: [^true] ]
	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:51:11' prior: 50862078!
includes: anAsset 

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset includes: anAsset] )
	! !

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 19:51:13'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 19:52:07'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:57:07' prior: 50861818!
add: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(accounts anySatisfy: [:asset | asset includes: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	
	accounts add: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:57:23' prior: 50862095!
add: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(accounts anySatisfy: [:asset | asset includes: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 19:57:31'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 19:57:31'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 19:58:18'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 19:58:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 19:58:18'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 19:58:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 19:58:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 19:58:18'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 19:58:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 19:58:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 19:58:18'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 19:58:18'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 19:58:18'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 19:58:18'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 19:58:23'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 19:59:43' prior: 50862106!
add: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(accounts anySatisfy: [:asset | asset includes: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 19:59:45'!
FAILURE!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/23/2021 20:00:15'!
anySatisfy: anAsset

	^self = anAsset! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 5/23/2021 20:00:15' prior: 50859553 overrides: 50861664!
hasRegistered: aTransaction

	^ transactions anySatisfy: aTransaction 
! !

!methodRemoval: ReceptiveAccount #includes: stamp: 'DB 5/23/2021 20:00:15'!
includes: anAsset

	^self = anAsset!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 20:00:34'!
anySatisfy: anAsset 

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset includes: anAsset] )
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/23/2021 20:00:34' prior: 50862084!
includes: anAsset 

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset anySatisfy: anAsset] )
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/23/2021 20:00:34' prior: 50862163!
add: anAsset 

	(accounts anySatisfy: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 5/23/2021 20:00:34' prior: 50862194!
anySatisfy: anAsset 

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset anySatisfy: anAsset] )
	! !

!methodRemoval: Portfolio #includes: stamp: 'DB 5/23/2021 20:00:34'!
includes: anAsset 

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset anySatisfy: anAsset] )
	!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:01:04'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:01:04'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:01:04'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:01:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:01:04'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:01:04'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:01:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:01:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:01:04'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:01:04'!
FAILURE!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:01:04'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:01:04'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:01:08'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:01:25'!
FAILURE!

----SNAPSHOT----(23 May 2021 20:01:43) CuisUniversity-4532.image priorSource: 16958195!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:01:44'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 20:02:21' prior: 50862208!
add: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:02:33'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 20:03:35' prior: 50862284!
add: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 20:03:42' prior: 50862301!
add: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:03:47'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:03:49'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:03:49'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:03:49'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:03:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:03:49'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:03:49'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:03:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:03:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:03:49'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:03:49'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:03:49'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:03:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:03:52'!
ERROR!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:04:05'!
FAILURE!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:04:57'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:05:07'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:05:51'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/23/2021 20:06:39'!
anySatisfy2: anAsset

	^self = anAsset! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 5/23/2021 20:06:39' prior: 50862186 overrides: 50861664!
hasRegistered: aTransaction

	^ transactions anySatisfy2: aTransaction 
! !

!methodRemoval: ReceptiveAccount #anySatisfy: stamp: 'DB 5/23/2021 20:06:39'!
anySatisfy: anAsset

	^self = anAsset!
!ReceptiveAccount methodsFor: 'testing' stamp: 'DB 5/23/2021 20:07:22' prior: 50862392 overrides: 50861664!
hasRegistered: aTransaction

	^ transactions anySatisfy: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43' prior: 50862402 overrides: 50861664!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/23/2021 20:08:33'!
anySatisfy: anAsset

	^self = anAsset! !

!methodRemoval: ReceptiveAccount #anySatisfy2: stamp: 'DB 5/23/2021 20:08:33'!
anySatisfy2: anAsset

	^self = anAsset!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:09:22'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:09:22'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:09:22'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:09:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:09:22'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:09:22'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:09:22'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:09:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:09:22'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:09:22'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:09:22'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:09:22'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:09:22'!
FAILURE!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:09:43'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:09:49'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:09:49'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:09:49'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 20:11:02' prior: 50862315!
add: anAsset 

	(accounts includes: anAsset) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:11:08'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:11:10'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:11:10'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:11:10'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:11:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:11:10'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:11:10'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:11:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:11:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:11:10'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:11:10'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:11:10'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:11:10'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 20:11:25' prior: 50862508!
add: anAsset 

	
	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:11:27'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 20:11:48' prior: 50862564!
add: anAsset 
	
	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !

----SNAPSHOT----(23 May 2021 20:16:43) CuisUniversity-4532.image priorSource: 16980081!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:16:50'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:16:50'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:16:50'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:16:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:16:50'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:16:50'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:16:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:16:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:16:50'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:16:50'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:16:50'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:16:50'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 20:20:52' prior: 50862614!
add: anAsset
	
	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !
!Portfolio methodsFor: 'balance' stamp: 'DB 5/23/2021 20:32:58' prior: 50860715 overrides: 50860250!
balance

	^accounts sum: [:anAsset | anAsset balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:33:01'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:33:01'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:33:01'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:33:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:33:01'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:33:01'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:33:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:33:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:33:01'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:33:01'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:33:01'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:33:01'!
PASSED!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 20:39:51'!
test13

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio2 add: account.

	portfolio1 add: portfolio2.
	
		
	self 
		should: [portfolio1 add: portfolio2 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 20:39:59' prior: 50862723!
test13

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio2 add: account.

	portfolio1 add: portfolio2.
	
		
	self 
		should: [portfolio1 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test13 stamp: 'DB 5/23/2021 20:40:00'!
FAILURE!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 20:41:36' prior: 50862737!
test13

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio2 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
		|_A"
	
		
	self 
		should: [portfolio1 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test13 stamp: 'DB 5/23/2021 20:41:57'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 20:42:33' prior: 50862667!
add: anAsset
	
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test13 stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:42:38'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/23/2021 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:42:38'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:42:53'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 5/23/2021 20:42:53'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:42:53'!
FAILURE!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 20:43:46' prior: 50862062!
test12

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.

	portfolio1 add: account.
	portfolio2 add: account.
	
	"P1  		P2
	 |_ A 		|_ A
	"
		
	self 
		should: [portfolio1 add: portfolio2 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 20:44:28' prior: 50862770!
add: anAsset
	
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:44:32'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:44:34'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/23/2021 20:44:34'!
PASSED!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 20:45:12'!
test14

	| portfolio  account |
		
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	"P1 
	  |_ P2 
		|_A"
	
		
	self 
		should: [portfolio add: portfolio ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test14 stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/23/2021 20:45:18'!
PASSED!

!methodRemoval: PortfolioTest #test14 stamp: 'DB 5/23/2021 20:45:26'!
test14

	| portfolio  account |
		
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	"P1 
	  |_ P2 
		|_A"
	
		
	self 
		should: [portfolio add: portfolio ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 20:47:28'!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio1 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
		|_A"
	
		
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test14 stamp: 'DB 5/23/2021 20:47:30'!
FAILURE!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/23/2021 20:48:07' prior: 50863040!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio1 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
	  |_A"
	
		
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test14 stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/23/2021 20:49:20'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/23/2021 20:49:20'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/23/2021 20:49:20'!
FAILURE!

(accounts anySatisfy: [:asset | asset anySatisfy: anAsset])!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/23/2021 20:49:47' prior: 50862912!
add: anAsset
	
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test14 stamp: 'DB 5/23/2021 20:51:39'!
FAILURE!

----SNAPSHOT----(23 May 2021 20:51:43) CuisUniversity-4532.image priorSource: 16991181!

----SNAPSHOT----(23 May 2021 21:18:58) CuisUniversity-4532.image priorSource: 17007641!

----QUIT----(23 May 2021 21:19:31) CuisUniversity-4532.image priorSource: 17007730!

----STARTUP---- (23 May 2021 21:23:51) as /Users/dbenitez/uba/1c2021-IS1/Quiz/macos64 - Portfolio 1/CuisUniversity-4532.image!


----QUIT----(23 May 2021 21:24:04) CuisUniversity-4532.image priorSource: 17007819!

----STARTUP---- (24 May 2021 19:00:58) as /Users/dbenitez/uba/1c2021-IS1/Quiz/macos64 - Portfolio 1/CuisUniversity-4532.image!


!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 19:03:59'!
FAILURE!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 19:08:22' prior: 50863057!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio1 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
	  |_A"
			
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 19:08:57' prior: 50863162!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
	  |_A"
			
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 19:15:59' prior: 50863177!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio1 add: portfolio2.
	
	"P1    			    	P3
	  |_ 		P2   		_|
	  |_		A    		_|"
			
	"P3 
	  |_ P2 
	  |_ A
	 "
			
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:20:23' prior: 50863122!
add: anAsset

	
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 19:20:36' prior: 50863192!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio1 add: portfolio2.
		
	"P1 
	  |_ P2 
	  |_ A
	 "
			
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 19:24:43' prior: 50863224!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio1 add: portfolio2.
		
	"P1 
	  |_ P2 
	  |_ A
		
	P2 parents -> [p1] -> roots -> [P2, A]
	A -> root [A] -> A anySate [P2,A]
	 "
			
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 19:25:42' prior: 50863239!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio1 add: portfolio2.
		
	"P1 
	  |_ P2 
	  |_ A
	 "
			
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 19:25:54' prior: 50863256!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.
	portfolio1 add: portfolio2.
		
	"P1 
	  |_ P2 
	  |_ A
	 "
			
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 19:25:55'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:26:44' prior: 50863208!
add: anAsset

	
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	anAsset add:  self.
	
	accounts add: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:26:46' prior: 50863288!
add: anAsset

	
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	anAsset add: self.
	
	accounts add: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:26:52' prior: 50863304!
add: anAsset

	
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	anAsset addParent: self.
	
	accounts add: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:27:10' prior: 50863320!
add: anAsset

	
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	anAsset isChildOf: self.
	
	accounts add: anAsset! !

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 19:27:11'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:27:20'!
isChildOf: aPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 5/24/2021 19:27:39'!
Asset subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:27:37' prior: 50863354!
isChildOf: aParent
	
	parents add: aParent 
	! !

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 19:27:42'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 19:27:50'!
ERROR!

Asset subclass: #Portfolio
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Asset subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 5/24/2021 19:28:26'!
Asset subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Asset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Asset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'DB 5/24/2021 19:28:44'!
Object subclass: #Asset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:29:18' prior: 50863366!
isChildOf: aParent
	! !
!Asset methodsFor: 'transactions' stamp: 'DB 5/24/2021 19:29:38'!
isChildOf: aParent

	self subclassResponsibility ! !

Asset subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 5/24/2021 19:29:43'!
Asset subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Asset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Asset
	instanceVariableNames: 'parents2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Asset
	instanceVariableNames: 'parents2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Asset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'DB 5/24/2021 19:30:10'!
Object subclass: #Asset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----STARTUP---- (24 May 2021 19:31:00) as /Users/dbenitez/uba/1c2021-IS1/Quiz/macos64 - Portfolio 1/CuisUniversity-4532.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 19:31:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 5/24/2021 19:31:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/24/2021 19:31:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 5/24/2021 19:31:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 5/24/2021 19:31:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 5/24/2021 19:31:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 5/24/2021 19:31:08'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 19:31:12'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 19:31:12'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 19:31:12'!
FAILURE!

Object subclass: #Asset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'DB 5/24/2021 19:31:23'!
Object subclass: #Asset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Asset methodsFor: 'balance' stamp: 'DB 5/24/2021 19:31:56'!
isChildOf: aParent

	parents add: aParent 	! !
!Portfolio methodsFor: 'initialization' stamp: 'DB 5/24/2021 19:32:15' prior: 50861673 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/24/2021 19:32:35' prior: 50859534 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:33:00' prior: 50863122!
add: anAsset
	
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 19:33:04'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 19:33:04'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 19:33:04'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:35:36' prior: 50863260!
add: anAsset


	(anAsset roots do: [:aRoot | aRoot anySatisfy: accounts roots]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	"(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset."
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:35:51' prior: 50863322!
add: anAsset

	(accounts roots do: [:aRoot | aRoot anySatisfy: accounts roots]) ifTrue: [self error: self class cannotAddAccountErrorDescription].
	
	"(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	accounts add: anAsset."
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:36:39' prior: 50863343!
add: anAsset

	"(accounts roots do: [:aRoot | aRoot anySatisfy: accounts roots]) ifTrue: [self error: self class cannotAddAccountErrorDescription]."
	
	"(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:37:26' prior: 50863364!
add: anAsset

	

	"(accounts roots do: [:aRoot | aRoot anySatisfy: accounts roots]) ifTrue: [self error: self class cannotAddAccountErrorDescription]."
	
	"(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:39:14' prior: 50863385!
add: anAsset

	

	"(accounts roots do: [:aRoot | aRoot anySatisfy: accounts roots]) ifTrue: [self error: self class cannotAddAccountErrorDescription]."
	
	"(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	"Nodo = root  
	P1
	|_ P2
	|_ A	
	"
	
	parents do: [ ].
	
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 19:58:50' prior: 50863406!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 19:58:53'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 19:58:53'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 19:58:53'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:00:20' prior: 50863429!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	
	""
	parents xxx: 
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

----SNAPSHOT----(24 May 2021 20:00:24) CuisUniversity-4532.image priorSource: 17008033!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:01:02' prior: 50863491!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	
	""
	parents xxx: anAsset notBeing: self.
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:01:55' prior: 50863511!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	(parents anySatisfy: [:parent | parent xxx: anAsset notBeing: self]) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:01:57'!
FAILURE!
!PortfolioTest methodsFor: 'assertions' stamp: 'DB 5/24/2021 20:02:10' overrides: 16927375!
assert: aFalse description: aBlockClosure 
	self shouldBeImplemented.! !

!methodRemoval: PortfolioTest #assert:description: stamp: 'DB 5/24/2021 20:02:25'!
assert: aFalse description: aBlockClosure 
	self shouldBeImplemented.!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:02:55'!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset anySatisfy: anAsset] )
	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:04:49' prior: 50863562!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset xxx: anAsset notBeing: self] )
	! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/24/2021 20:05:09'!
xxx: anAsset notBeing: portfolio

	^self = anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:08:26' prior: 50863569!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset xxx: anAsset notBeing: self] )
	
	"[P2, A]"
	! !

----SNAPSHOT----(24 May 2021 20:09:32) CuisUniversity-4532.image priorSource: 17019427!

	^self = anAsset!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/24/2021 20:10:58' prior: 50863576!
xxx: anAsset notBeing: portfolio

	^self = anAsset! !

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:11:15'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 20:11:19'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:11:19'!
PASSED!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 20:12:17' prior: 50863057!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio1 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
	  |_A"
	
		
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 20:12:45'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:12:45'!
PASSED!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 20:13:16'!
test15

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio1 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
	  |_A"
	
		
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 20:17:13' prior: 50863701!
test15

	| p1 p2 p3 a b |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio  new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p1 add: b.
	p1 add: p2.
	
	p2 add: a.
	p2 add: p3.
	
	
	"P1 
	  |_ P2 
	  |_A"
	
		
	self 
		should: [p3 add: b ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 20:18:39' prior: 50863716!
test15

	| p1 p2 p3 a b |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio  new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	"P1
	  |_ P2
	  	|_ P3 
	  	|_A
	  |_ B"
	  
		
	self 
		should: [p3 add: b ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 20:18:41'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:21:53' prior: 50863581!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self])
	
	"[P2, A]"
	! !

----SNAPSHOT----(24 May 2021 20:22:11) CuisUniversity-4532.image priorSource: 17021999!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:23:05' prior: 50863748!
xxx: anAsset notBeing: portfolio

	 

	^(self = anAsset) or: ((accounts excludes: portfolio) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self])
	
	"[P2, A]"
	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:23:08' prior: 50863761!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts excludes: portfolio) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self])
	
	"[P2, A]"
	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:30:51' prior: 50863772!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts excludes: portfolio) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self])
	
	"[P2, A]"
	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:30:56' prior: 50863783!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts excludes: portfolio) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self])

	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 20:31:01'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:31:01'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 20:31:01'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:31:07'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:32:22' prior: 50863794!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts excludes: [ :account | account = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self])

	! !

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:32:23'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:32:32'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 20:32:45'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:32:45'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 20:32:45'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:32:46'!
FAILURE!

	(accounts excludes: portfolio)!

	(accounts reject: [:account | account = portfolio])!

(accounts reject: [:account | account = portfolio])!

(accounts reject: [:account | account = portfolio]).!

(accounts reject: [:account | account = portfolio]).!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:39:21' prior: 50863853!
xxx: anAsset notBeing: portfolio


	| a |
	a := (accounts reject: [:account | account = portfolio]).

	^(self = anAsset) or: ((accounts excludes: portfolio) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self])

	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:40:03' prior: 50863925!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts reject: [:account | account = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self])

	! !

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:40:04'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 20:40:05'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:40:10'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 20:40:10'!
PASSED!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 20:42:23'!
test16

	| p1 p2 p3 a b |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio  new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	"P1
	  |_ P2
	  	|_ P3 
	  	|_A
	  |_ B"
	  
		
	self 
		should: [p3 add: p1 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 20:42:25'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 20:42:25'!
PASSED!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 20:43:48' prior: 50863998!
test16

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	"P1
	  |_ P2
	  	|_ P3 
	  	|_A
	  |_ B"
	  
		
	self 
		should: [p3 add: p1 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/24/2021 20:44:30' prior: 50864064!
test16

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	p4 add: b.
	
	"P1
	  |_ P2
	  	|_ P3 
	  	|_A
	  |_ B
	P4
	|_ B
	"
	  
		
	self 
		should: [p3 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 20:45:01'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:46:30' prior: 50863529!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	(parents anySatisfy: [:parent | parent xxx: anAsset notBeing: self]) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:47:47' prior: 50863937!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts reject: [:account | account = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 
				   or: (anAsset anySatisfy: [:asset | anAsset anySatisfy: self])

	! !

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 20:47:50'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:49:25' prior: 50864120!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts reject: [:account | account = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 
				   or: (anAsset anySatisfy: [:asset | asset xxx: anAsset notBeing: self])

	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:55:53'!
yyy: anAsset

	(parents anySatisfy: [:parent | parent xxx: anAsset notBeing: self]) 
	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:57:05' prior: 50864099!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	(anAsset yyy: self)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:57:48' prior: 50864135!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts reject: [:account | account = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 


	! !

----SNAPSHOT----(24 May 2021 20:57:52) CuisUniversity-4532.image priorSource: 17027422!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 20:57:54'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 20:57:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 20:57:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 20:57:54'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 20:57:54'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:58:11' prior: 50864148!
yyy: anAsset

	^(parents anySatisfy: [:parent | parent xxx: anAsset notBeing: self]) 
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 20:58:19'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 20:58:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 20:58:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 20:58:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 20:58:19'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 20:58:19'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:58:42' prior: 50864154!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	"(anAsset yyy: self)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 20:58:46'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 20:58:46'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 20:58:46'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:00:06' prior: 50864176!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts reject: [:account | account = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 
				   or: (anAsset anySatisfy: [])


	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:00:58' prior: 50864365!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts reject: [:account | account = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 
				 "  or: (anAsset anySatisfy: [:asset  ])"


	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:01:42' prior: 50864377!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts reject: [:account | account = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 


	! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/24/2021 21:06:05' prior: 50863592!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) ! !

----SNAPSHOT----(24 May 2021 21:06:21) CuisUniversity-4532.image priorSource: 17041151!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:06:24'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:06:24'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:08:29' prior: 50864389!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts reject: [:asset | asset = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 


	! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/24/2021 21:11:02' prior: 50864400!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((parents reject: [:asset | asset = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:11:06'!
PASSED!

----SNAPSHOT----(24 May 2021 21:11:28) CuisUniversity-4532.image priorSource: 17048191!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:26:08' prior: 50864292!
add: anAsset

	"(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:26:11'!
FAILURE!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:26:11'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:26:11'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:26:11'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:26:11'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:26:32' prior: 50864521!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

"	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:26:35'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:26:35'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:26:35'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:26:50' prior: 50864589!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
	"(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:26:53'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:26:53'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:27:06' prior: 50864659!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:27:08'!
PASSED!

!methodRemoval: Portfolio #anySatisfy: stamp: 'DB 5/24/2021 21:27:16'!
anySatisfy: anAsset 

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset anySatisfy: anAsset] )
	!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:27:19'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:27:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:27:19'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:27:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:27:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:27:19'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:27:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:27:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:27:19'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:27:19'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:27:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:27:19'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:27:19'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:27:19'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:27:19'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:27:19'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 20:58:42' prior: 50864727!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	"(anAsset yyy: self)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:28:31'!
anySatisfy: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:30:41' prior: 50864867!
anySatisfy: anAsset

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset anySatisfy: anAsset ])! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:30:44'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:30:44'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:31:02' prior: 50864845!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
		
"	(anAsset anySatisfy: self) ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	"(anAsset yyy: self)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:31:05'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:31:05'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:31:16' prior: 50864926!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	"(anAsset yyy: self)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:31:23' prior: 50864996!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	"(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	"
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	"(anAsset yyy: self)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:31:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 5/24/2021 21:31:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 5/24/2021 21:31:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 5/24/2021 21:31:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 5/24/2021 21:31:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 5/24/2021 21:31:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 5/24/2021 21:31:25'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:31:27'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:31:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:31:27'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:31:45' prior: 50865015!
add: anAsset

	"(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription]."

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	"(anAsset yyy: self)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:31:49'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:31:49'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:31:49'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:32:15' prior: 50865111!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	"(anAsset yyy: self)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
		
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/24/2021 21:32:18' prior: 50865181!
add: anAsset

	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
			
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:32:21'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:32:21'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'DB 5/24/2021 21:37:50' prior: 50863247 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/24/2021 21:37:55' prior: 50863254 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	! !
!Asset methodsFor: 'balance' stamp: 'DB 5/24/2021 21:38:03' overrides: 16896425!
initialize
	parents := OrderedCollection new.! !
!Asset methodsFor: 'balance' stamp: 'DB 5/24/2021 21:38:06' prior: 50865276 overrides: 16896425!
initialize

	parents := OrderedCollection new.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:38:16'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:38:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:38:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:38:16'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:38:16'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'DB 5/24/2021 21:38:43' prior: 50865265 overrides: 50865281!
initialize

	accounts := OrderedCollection new.
	super initialize 
	! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/24/2021 21:38:52' prior: 50865271 overrides: 50865281!
initialize

	transactions := OrderedCollection new.
	super initialize
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/24/2021 21:38:55'!
PASSED!

----SNAPSHOT----(24 May 2021 21:43:49) CuisUniversity-4532.image priorSource: 17051755!

----QUIT----(24 May 2021 21:43:52) CuisUniversity-4532.image priorSource: 17079759!

----STARTUP---- (25 May 2021 10:32:16) as /Users/dbenitez/uba/1c2021-IS1/Quiz/macos64 - Portfolio 1/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 10:41:09'!
test17

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p1 add: p2.
	p3 add: b.
	p1 add: p3.
	p4 add: p3.
	
	"P1               P4
	  |_ P2           |
	 	|_ A       |
	  |_ __ P3 __|
	  	     |_B
	 
	"
	  
		
	self 
		should: [p3 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 10:41:29' prior: 50865403!
test17

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p1 add: p2.
	p3 add: b.
	p1 add: p3.
	p4 add: p3.
	
	"P1               P4
	  |_ P2           |
	 	|_ A       |
	  |_ __ P3 __|
	  	     |_B
	 
	"
	  
		
	self 
		should: [p2 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 10:42:13' prior: 50865421!
test17

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p1 add: p2.
	p3 add: b.
	p1 add: p3.
	p4 add: p3.
	
	"P1               P4
	  |_ P2           |
	 	|_ A       |
	  |_ __ P3 __|
	  	     |_B
	 
	" 
	self 
		should: [p2 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 10:54:52' prior: 50865439!
test17

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p1 add: p2.
	p3 add: b.
	p1 add: p3.
	p4 add: p3.
	
	"P1               P4
	  |_ P2            |_ C
	 	|_ A        |_ P5
	         |_ P3     |__d
	  	     |_B
	 
	" 
	self 
		should: [p2 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 10:55:28'!
zzz: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts reject: [:asset | asset = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 


	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 10:55:37'!
zzz: anAsset

	^(self = anAsset) or: ((accounts reject: [:asset | | portfolio | asset = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 


	! !

!methodRemoval: Portfolio #zzz:notBeing: stamp: 'DB 5/25/2021 10:55:45'!
zzz: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts reject: [:asset | asset = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 


	!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 10:58:38'!
isFatherOf: anAsset
	
	accounts add: anAsset.
! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:00:11' prior: 50865484!
zzz: anAsset

	| m |
	m := Dictionary new.
	
	self isFatherOf: anAsset.
	anAsset isChildOf: self.

	^(self = anAsset) or: ((accounts reject: [:asset | | portfolio | asset = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 


	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:03:33'!
roots: c

	parents 
		ifEmpty: [ c add: self]
		ifNotEmpty: [ parents do: [:aParent | aParent root: c] ]! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:03:38' prior: 50865522!
roots: c

	parents 
		ifEmpty: [ c add: self]
		ifNotEmpty: [ parents do: [:aParent | aParent roots: c] ]! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:04:39' prior: 50865200!
add: anAsset

	| roots |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	roots := OrderedCollection new.
	
	self roots: roots.
			
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

----STARTUP---- (25 May 2021 11:07:14) as /Users/dbenitez/uba/1c2021-IS1/Quiz/macos64 - Portfolio 1/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 11:08:35'!
test17

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	
	p1 add: p3.
	p1 add: p2.
	p2 add: a.
	p3 add: b.
	p4 add: p3.
	
	"P1
	  |_ P2
	  	|_ P3 
	  	|_A
	  |_ B
	P4
	|_ B
	"
	  
		
	self 
		should: [p2 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

----SNAPSHOT----(25 May 2021 11:08:45) CuisUniversity-4532.image priorSource: 17079848!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:12:06'!
roots: rootContainer

	parents ifEmpty: [rootContainer add: self] ifNotEmpty: [ parents do: [:aParent | aParent roots: rootContainer] ]
	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:12:57'!
allRoots

	| rootContainers |
	rootContainers := OrderedCollection new.
! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:13:13' prior: 50865582!
allRoots

	| rootContainers |
	rootContainers := OrderedCollection new.
	
	self roots: rootContainers.
	
	^rootContainers 
! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:13:34' prior: 50865200!
add: anAsset

	| m |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	m :=  self roots.
			
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !

----SNAPSHOT----(25 May 2021 11:13:48) CuisUniversity-4532.image priorSource: 17085483!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:13:59'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:14:26' prior: 50865594!
add: anAsset

	| m |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ].
	
	m :=  self allRoots .
			
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:15:42' prior: 50865616!
add: anAsset

	| m |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allRoots .
			
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:17:18' prior: 50865633!
add: anAsset

	| m t |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allRoots .
	
	t := anAsset allRoots .		
	accounts add: anAsset.
	
	
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:18:45' prior: 50865650!
add: anAsset

	| m t |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allRoots.
	
	t := anAsset allRoots.		
	accounts add: anAsset.
	
	
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:18:54' prior: 50865668!
add: anAsset

	| m t |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allRoots.
	t := anAsset allRoots.		
	
	accounts add: anAsset.
	
	
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:20:21' prior: 50865686!
add: anAsset

	| m t |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allRoots.
	t := anAsset allRoots.		

	
	accounts add: anAsset.
	
	
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:22:05' prior: 50865704!
add: anAsset

	| m t |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allRoots.
	"t := anAsset allRoots.		"
	
	m anySatisfy: [ :root | t contains: root  ].

	
	accounts add: anAsset.
	
	
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:22:28' prior: 50865722!
add: anAsset

	| m t |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allRoots.
	t := anAsset allRoots.		
	
	m anySatisfy: [ :root | t contains: root  ].

	
	accounts add: anAsset.
	
	
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:22:48' prior: 50865742!
add: anAsset

	| m t |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allRoots.
	t := anAsset allRoots.		
	
	m anySatisfy: [ :root | t includes: root  ].

	
	accounts add: anAsset.
	
	
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:23:05' prior: 50865762!
add: anAsset

	| m t |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allRoots.
	t := anAsset allRoots.		
	
	(m anySatisfy: [ :root | t includes: root  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription].	

	
	accounts add: anAsset.
	
	
	
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:23:35'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:28:24'!
allLeaves

	| rootContainers |
	rootContainers := OrderedCollection new.
	
	self roots: rootContainers.
	
	^rootContainers 
! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:28:45' prior: 50865806!
allLeaves

	| rootContainers |
	rootContainers := OrderedCollection new.
	
	self roots: rootContainers.
	
	
	
	^rootContainers 
! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:29:03'!
isLeaf
	false.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/25/2021 11:29:20'!
isLeaf
	^true! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:29:57' prior: 50865820!
isLeaf
	^accounts isEmpty ! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:30:22' prior: 50865813!
allLeaves

	| rootContainers leaves |
	rootContainers := OrderedCollection new.
	
	self roots: rootContainers.
	
	leaves := OrderedCollection new.
	
	
	
	^rootContainers 
! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:30:53' prior: 50865832!
allLeaves

	| rootContainers leaves |
	rootContainers := OrderedCollection new.
	
	self roots: rootContainers.
	
	leaves := OrderedCollection new.
	 
	
	
	
	^leaves 
! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:33:14'!
leaves: leafContainer

	(self isLeaf) ifTrue: [leafContainer add: self] ifFalse: [ accounts do: [:aChild | aChild leaves: leafContainer ]]
	! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:33:33' prior: 50865840!
allLeaves

	| rootContainers leaves |
	rootContainers := OrderedCollection new.
	
	self roots: rootContainers.
	
	leaves := OrderedCollection new.
	
	
	^leaves 
! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:36:37' prior: 50865855!
allLeaves

	| rootContainers leafContainer |
	rootContainers := OrderedCollection new.
	
	self roots: rootContainers.
	
	leafContainer := OrderedCollection new.
	rootContainers  do: [ :aRoot | aRoot leaves: leafContainer].
	 
	
	^leafContainer 
! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:36:57' prior: 50865782!
add: anAsset

	| m t |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allLeaves .
	t := anAsset allLeaves .		
	
	(m anySatisfy: [ :root | t includes: root  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription].	

	
	accounts add: anAsset.
	
	
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:37:13' prior: 50865874!
add: anAsset

	| m t |
	(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allLeaves .
	t := anAsset allLeaves .		
	
	(m anySatisfy: [ :root | t includes: root  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription].	

	
	accounts add: anAsset.
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:37:29'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/25/2021 11:38:41'!
allLeaves

	| rootContainers  |
	rootContainers := OrderedCollection new.
	rootContainers add: self.
	^rootContainers ! !

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:38:54'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'DB 5/25/2021 11:39:33'!
leaves: leafContainer

	leafContainer add: self
	! !

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:39:57'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 11:40:02'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:40:02'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:41:15' prior: 50865896!
add: anAsset

	| m t |
	"(accounts anySatisfy: [:asset | asset anySatisfy: anAsset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].

	(accounts anySatisfy: [:asset | anAsset anySatisfy: asset]) ifTrue: [self error: self class cannotAddAccountErrorDescription].	"
	
	"(self yyy: anAsset)  ifTrue: [self error: self class cannotAddAccountErrorDescription ]."
	
	m :=  self allLeaves .
	t := anAsset allLeaves .		
	
	(m anySatisfy: [ :root | t includes: root  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription].	

	
	accounts add: anAsset.
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 11:41:18'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:41:18'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:41:56' prior: 50865986!
add: anAsset

	| m t |
	
	m :=  self allLeaves .
	t := anAsset allLeaves .		
	
	(m anySatisfy: [ :root | t includes: root  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription].	

	
	accounts add: anAsset.
	anAsset isChildOf: self.! !

!methodRemoval: Portfolio #xxx:notBeing: stamp: 'DB 5/25/2021 11:44:23'!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((accounts reject: [:asset | asset = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self] ) 
				   or: (parents anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) 


	!

!methodRemoval: Portfolio #yyy: stamp: 'DB 5/25/2021 11:44:29'!
yyy: anAsset

	^(parents anySatisfy: [:parent | parent xxx: anAsset notBeing: self]) 
	!

----SNAPSHOT----(25 May 2021 11:44:31) CuisUniversity-4532.image priorSource: 17086722!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 11:44:35'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:44:35'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:45:31' prior: 50866058!
add: anAsset

	| m t |
	
	m :=  self allLeaves .
	t := anAsset allLeaves .		
	
	(m anySatisfy: [ :root | t includes: root  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription].	

	
	accounts add: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:45:46'!
isFatherOf: anAsset

	^ accounts add: anAsset! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:45:46' prior: 50866137!
add: anAsset

	| m t |
	
	m :=  self allLeaves .
	t := anAsset allLeaves .		
	
	(m anySatisfy: [ :root | t includes: root  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription].	

	
	self isFatherOf: anAsset.
	
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:46:11' prior: 50866152!
add: anAsset

	| m t |
	
	m :=  self allLeaves .
	t := anAsset allLeaves .		
	
	(m anySatisfy: [ :root | t includes: root  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription].	

	
	self isFatherOf: anAsset.
	anAsset isChildOf: self.! !

!methodRemoval: Portfolio #anySatisfy: stamp: 'DB 5/25/2021 11:46:22'!
anySatisfy: anAsset

	^(self = anAsset) or: (accounts anySatisfy: [:asset | asset anySatisfy: anAsset ])!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:46:24'!
PASSED!

!methodRemoval: ReceptiveAccount #xxx:notBeing: stamp: 'DB 5/25/2021 11:46:31'!
xxx: anAsset notBeing: portfolio

	^(self = anAsset) or: ((parents reject: [:asset | asset = portfolio]) anySatisfy: [:asset | asset xxx: anAsset notBeing: self]) !

!methodRemoval: ReceptiveAccount #anySatisfy: stamp: 'DB 5/25/2021 11:46:38'!
anySatisfy: anAsset

	^self = anAsset!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:47:31' prior: 50866163!
add: anAsset

	| m t |
	
	m :=  self allLeaves .
	t := anAsset allLeaves .		
	
	(m anySatisfy: [ :leaf | t includes: leaf  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription].	

	
	self isFatherOf: anAsset.
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 11:47:35'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:47:35'!
PASSED!
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 11:50:19'!
isRoot

	^parents isEmpty 
	! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 11:50:46' prior: 50865575!
roots: rootContainer

	(self isRoot) ifTrue: [rootContainer add: self] ifFalse: [ parents do: [:aParent | aParent roots: rootContainer] ]
	! !
!Asset methodsFor: 'balance' stamp: 'DB 5/25/2021 11:51:20'!
isRoot

	^parents isEmpty ! !

!methodRemoval: Portfolio #isRoot stamp: 'DB 5/25/2021 11:51:47'!
isRoot

	^parents isEmpty 
	!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:54:43'!
assertNotDuplicatedAssetOrCycles: anAsset

	| m t |
	
	m :=  self allLeaves .
	t := anAsset allLeaves .		
	
	(m anySatisfy: [ :leaf | t includes: leaf  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription]! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:54:43' prior: 50866241!
add: anAsset

	self assertNotDuplicatedAssetOrCycles: anAsset.	

	
	self isFatherOf: anAsset.
	anAsset isChildOf: self.! !
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 11:54:47' prior: 50866329!
add: anAsset

	self assertNotDuplicatedAssetOrCycles: anAsset.	

	self isFatherOf: anAsset.
	anAsset isChildOf: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:54:49'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:54:52'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:54:55'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:54:56'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 11:55:17'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:55:17'!
PASSED!
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 11:55:54' prior: 50866319!
assertNotDuplicatedAssetOrCycles: anAsset

	| t |
	
	t := anAsset allLeaves .		
	
	(self allLeaves anySatisfy: [ :leaf | t includes: leaf  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription]! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 11:56:10' prior: 50866596!
assertNotDuplicatedAssetOrCycles: anAsset
	
	(self allLeaves anySatisfy: [ :leaf | anAsset allLeaves includes: leaf  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 11:56:18'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 11:56:18'!
PASSED!
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 11:58:51' prior: 50866606!
assertNotDuplicatedAssetOrCycles: anAsset
	
	(self allLeaves anySatisfy: [ :leaf | | anAssetLeaves |
	anAssetLeaves _ anAsset allLeaves.
	anAssetLeaves includes: leaf  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription]! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 11:59:09' prior: 50866666!
assertNotDuplicatedAssetOrCycles: anAsset

	| anAssetLeaves |
	anAssetLeaves _ anAsset allLeaves.
	
	(self allLeaves anySatisfy: [ :leaf | 
	
	anAssetLeaves includes: leaf  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription]! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 11:59:17' prior: 50866677!
assertNotDuplicatedAssetOrCycles: anAsset

	| anAssetLeaves |
	anAssetLeaves _ anAsset allLeaves.
	
	(self allLeaves anySatisfy: [ :leaf | anAssetLeaves includes: leaf  ])  ifTrue: [self error: self class cannotAddAccountErrorDescription]! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 11:59:35' prior: 50866688!
assertNotDuplicatedAssetOrCycles: anAsset

	| anAssetLeaves |
	anAssetLeaves _ anAsset allLeaves.
	
	(self allLeaves anySatisfy: [ :leaf | anAssetLeaves includes: leaf ])  ifTrue: [self error: self class cannotAddAccountErrorDescription]! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 11:59:40' prior: 50866699!
assertNotDuplicatedAssetOrCycles: anAsset

	| anAssetLeaves |
	anAssetLeaves _ anAsset allLeaves.
	
	(self allLeaves anySatisfy: [ :leaf | anAssetLeaves includes: leaf])  ifTrue: [self error: self class cannotAddAccountErrorDescription]! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 11:59:43' prior: 50866710!
assertNotDuplicatedAssetOrCycles: anAsset

	| anAssetLeaves |
	anAssetLeaves _ anAsset allLeaves.
	
	(self allLeaves anySatisfy: [:leaf | anAssetLeaves includes: leaf])  ifTrue: [self error: self class cannotAddAccountErrorDescription]! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 11:59:55' prior: 50866721!
assertNotDuplicatedAssetOrCycles: anAsset

	| anAssetLeaves |
	anAssetLeaves _ anAsset allLeaves.
	
	(self allLeaves anySatisfy: [:leaf | anAssetLeaves includes: leaf]) ifTrue: [self error: self class cannotAddAccountErrorDescription]! !

!classRenamed: #Asset as: #Account stamp: 'DB 5/25/2021 12:00:43'!
Smalltalk renameClassNamed: #Asset as: #Account!
!Portfolio methodsFor: 'adding' stamp: 'DB 5/25/2021 12:01:54' prior: 50866336!
add: anAccount

	self assertNotDuplicatedAssetOrCycles: anAccount.	

	self isFatherOf: anAccount.
	anAccount isChildOf: self.! !
!Account methodsFor: 'testing' stamp: 'DB 5/25/2021 12:02:30' prior: 50861664!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 12:03:04' prior: 50865828!
isLeaf

	^accounts isEmpty ! !
!Account methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 12:03:23'!
isLeaf

	self subclassResponsibility ! !
!Account methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 12:03:49'!
leaves: leafContainer

	self subclassResponsibility ! !
!Account methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 12:04:28'!
allLeaves

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 12:05:12'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 12:05:14'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 12:05:14'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'DB 5/25/2021 12:09:10'!
transactions: transactionContainer

	accounts do: [	:asset | transactionContainer addAll: asset transactions].
	! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 5/25/2021 12:09:36' prior: 50861069 overrides: 50861668!
transactions
	
	| transactions |
	transactions := OrderedCollection new.
	accounts do: [	:asset | self transactions: transactions].
	^transactions! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 5/25/2021 12:10:06' prior: 50866883 overrides: 50861668!
transactions
	
	| transactions |
	transactions := OrderedCollection new.
	accounts do: [	:asset | asset transactions: transactions].
	^transactions! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 5/25/2021 12:11:57' prior: 50866876!
transactions: transactionContainer

	accounts do: [	:asset | asset transactions: transactionContainer].
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 5/25/2021 12:12:32'!
transactions: transactionContainer

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 5/25/2021 12:12:55' prior: 50866905!
transactions: transactionContainer

	^ transactionContainer addAll: self transactions ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 5/25/2021 12:12:59' prior: 50866910!
transactions: transactionContainer

	^ transactionContainer addAll: self transactions! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 12:13:01'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 12:13:01'!
PASSED!
!Account methodsFor: 'transactions' stamp: 'DB 5/25/2021 12:14:01'!
transactions: transactionContainer

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 12:14:12'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 12:14:12'!
PASSED!
!Account methodsFor: 'transactions' stamp: 'DB 5/25/2021 12:14:37' prior: 50861668!
transactions

	self subclassResponsibility 
	! !
!Account methodsFor: 'transactions' stamp: 'DB 5/25/2021 12:14:55' prior: 50866972!
transactions: transactionContainern

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'DB 5/25/2021 12:15:03' prior: 50867033!
transactions: transactionContainer

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 12:15:15'!
PASSED!

----SNAPSHOT----(25 May 2021 12:18:01) CuisUniversity-4532.image priorSource: 17101848!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/25/2021 12:18:35' prior: 50865340 overrides: 50865281!
initialize

	transactions := LinkedList new.
	super initialize
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 12:24:27'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 12:24:27'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 12:24:27'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 12:24:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 12:24:27'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 12:24:27'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 12:24:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 12:24:27'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 12:24:27'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 12:24:27'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 12:24:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 12:24:27'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 12:24:27'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 12:24:27'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 12:24:27'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 12:24:27'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 12:24:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 12:24:33'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 12:24:33'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'DB 5/25/2021 12:24:33'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 12:24:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 12:24:33'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 5/25/2021 12:24:33'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 12:24:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 12:24:33'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 12:24:33'!
ERROR!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 12:24:33'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 12:24:33'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'DB 5/25/2021 12:24:33'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'DB 5/25/2021 12:24:33'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'DB 5/25/2021 12:24:33'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'DB 5/25/2021 12:24:33'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'DB 5/25/2021 12:24:33'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 12:24:33'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 12:24:40'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 5/25/2021 12:29:55' prior: 50867097 overrides: 50865281!
initialize

	transactions := OrderedCollection new.
	super initialize
	! !
!PortfolioTest methodsFor: 'balance' stamp: 'DB 5/25/2021 12:30:43' prior: 50860234!
test03

	| portfolio child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account. 

	child add: account.	
	portfolio add: child.
	
	

	self assert: 100 equals: (portfolio balance).

! !
!PortfolioTest methodsFor: 'balance' stamp: 'DB 5/25/2021 12:31:33'!
test03BalanceOfAPortfolioTree

	| portfolio child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account. 

	child add: account.	
	portfolio add: child.
	
	

	self assert: 100 equals: (portfolio balance).

! !

!methodRemoval: PortfolioTest #test03 stamp: 'DB 5/25/2021 12:31:33'!
test03

	| portfolio child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account. 

	child add: account.	
	portfolio add: child.
	
	

	self assert: 100 equals: (portfolio balance).

!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 5/25/2021 12:36:55'!
test06Portfolio

	| portfolio account deposit child |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	child add: account.
	portfolio add: child.
	
	self assert: (portfolio hasRegistered: deposit).

! !

!methodRemoval: PortfolioTest #test06 stamp: 'DB 5/25/2021 12:36:55'!
test06

	| portfolio account deposit child |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	child add: account.
	portfolio add: child.
	
	self assert: (portfolio hasRegistered: deposit).

!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 5/25/2021 12:37:25'!
test06HasRegistrerOfAPortfoloTree

	| portfolio account deposit child |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	child add: account.
	portfolio add: child.
	
	self assert: (portfolio hasRegistered: deposit).

! !

!methodRemoval: PortfolioTest #test06Portfolio stamp: 'DB 5/25/2021 12:37:25'!
test06Portfolio

	| portfolio account deposit child |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	child add: account.
	portfolio add: child.
	
	self assert: (portfolio hasRegistered: deposit).

!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:39:29'!
test12TwoPortfolioWithTheSameAccountCannotBeAdded

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.

	portfolio1 add: account.
	portfolio2 add: account.
	
	"P1  		P2
	 |_ A 		|_ A
	"
		
	self 
		should: [portfolio1 add: portfolio2 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!methodRemoval: PortfolioTest #test12 stamp: 'DB 5/25/2021 12:39:29'!
test12

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.

	portfolio1 add: account.
	portfolio2 add: account.
	
	"P1  		P2
	 |_ A 		|_ A
	"
		
	self 
		should: [portfolio1 add: portfolio2 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:41:30'!
test13CannotAddAnAccountIfThereExistAsALeaf

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio2 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
		|_A"
	
		
	self 
		should: [portfolio1 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!methodRemoval: PortfolioTest #test13 stamp: 'DB 5/25/2021 12:41:30'!
test13

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio2 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
		|_A"
	
		
	self 
		should: [portfolio1 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:41:51'!
test13CannotAddAnAccounInTheRoottIfThereExistAsALeaf

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio2 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
		|_A"
	
		
	self 
		should: [portfolio1 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!methodRemoval: PortfolioTest #test13CannotAddAnAccountIfThereExistAsALeaf stamp: 'DB 5/25/2021 12:41:51'!
test13CannotAddAnAccountIfThereExistAsALeaf

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	
	account := ReceptiveAccount new.
	portfolio2 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
		|_A"
	
		
	self 
		should: [portfolio1 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:42:10' prior: 50863643!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
	  |_A"
	
		
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:43:17'!
test14CannotDuplicateALeaf

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
	  |_A"
	
		
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!methodRemoval: PortfolioTest #test14 stamp: 'DB 5/25/2021 12:43:17'!
test14

	| portfolio1 portfolio2 account |
		
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	portfolio1 add: account.

	portfolio1 add: portfolio2.
	
	"P1 
	  |_ P2 
	  |_A"
	
		
	self 
		should: [portfolio2 add: account ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:45:33' prior: 50863731!
test15

	| p1 p2 p3 a b |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio  new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	"P1
	  |_ P2
	  	|_ P3 
	  	|_A
	  |_ B"
	  
	self 
		should: [p3 add: b ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:46:34'!
test15CannotDuplicateALeafInADeepTree

	| p1 p2 p3 a b |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio  new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	"P1
	  |_ P2
	  	|_ P3 
	  	|_A
	  |_ B"
	  
	self 
		should: [p3 add: b ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!methodRemoval: PortfolioTest #test15 stamp: 'DB 5/25/2021 12:46:34'!
test15

	| p1 p2 p3 a b |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio  new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	"P1
	  |_ P2
	  	|_ P3 
	  	|_A
	  |_ B"
	  
	self 
		should: [p3 add: b ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:47:05' prior: 50864080!
test16

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	p4 add: b.
	
	"P1
	  |_ P2
	  	|_ P3 
	  	|_A
	  |_ B
	P4
	|_ B
	"
		
	self 
		should: [p3 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:47:50' prior: 50867470!
test16

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	p4 add: b.
	
	"P1                  P4
	  |_ P2              |_ B
	  	|_ P3 
	  	|_A
	  |_ B
	"
		
	self 
		should: [p3 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:49:15'!
test16CannotAddAPortfolioWithAnExistAccount

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	p4 add: b.
	
	"P1                  P4
	  |_ P2              |_ B
	  	|_ P3 
	  	|_A
	  |_ B
	"
		
	self 
		should: [p3 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!methodRemoval: PortfolioTest #test16 stamp: 'DB 5/25/2021 12:49:15'!
test16

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	p4 add: b.
	
	"P1                  P4
	  |_ P2              |_ B
	  	|_ P3 
	  	|_A
	  |_ B
	"
		
	self 
		should: [p3 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioTree stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test06HasRegistrerOfAPortfoloTree stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test12TwoPortfolioWithTheSameAccountCannotBeAdded stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddAnAccounInTheRoottIfThereExistAsALeaf stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test14CannotDuplicateALeaf stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test15CannotDuplicateALeafInADeepTree stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAPortfolioWithAnExistAccount stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'DB 5/25/2021 12:49:26'!
PASSED!

----SNAPSHOT----(25 May 2021 12:49:34) CuisUniversity-4532.image priorSource: 17134163!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:50:18'!
test16CannotAddAPortfolioWithAnExistingAccount

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	p4 add: b.
	
	"P1                  P4
	  |_ P2              |_ B
	  	|_ P3 
	  	|_A
	  |_ B
	"
		
	self 
		should: [p3 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!methodRemoval: PortfolioTest #test16CannotAddAPortfolioWithAnExistAccount stamp: 'DB 5/25/2021 12:50:18'!
test16CannotAddAPortfolioWithAnExistAccount

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p2 add: a.
	p2 add: p3.
	p1 add: b.
	p1 add: p2.
	
	p4 add: b.
	
	"P1                  P4
	  |_ P2              |_ B
	  	|_ P3 
	  	|_A
	  |_ B
	"
		
	self 
		should: [p3 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:51:07' prior: 50865556!
test17

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	
	p1 add: p3.
	p1 add: p2.
	p2 add: a.
	p3 add: b.
	p4 add: p3.
	
	"P1                P4
	  |_ P2           \_ B
	  	|_ P3 
	  	|_A
	  |_ B
	"
	  
		
	self 
		should: [p2 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:51:17' prior: 50867636!
test17

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	
	p1 add: p3.
	p1 add: p2.
	p2 add: a.
	p3 add: b.
	p4 add: p3.
	
	"P1                P4
	  |_ P2           \_ B
	  	|_ P3 
	  	|_A
	  |_ B
	"
	  
		
	self 
		should: [p2 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:51:44'!
test17CannotAddAPortfolioWithAnExistingAccountInTheMiddleOfTheTree

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	
	p1 add: p3.
	p1 add: p2.
	p2 add: a.
	p3 add: b.
	p4 add: p3.
	
	"P1                P4
	  |_ P2           \_ B
	  	|_ P3 
	  	|_A
	  |_ B
	"
	  
		
	self 
		should: [p2 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !

!methodRemoval: PortfolioTest #test17 stamp: 'DB 5/25/2021 12:51:44'!
test17

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	
	p1 add: p3.
	p1 add: p2.
	p2 add: a.
	p3 add: b.
	p4 add: p3.
	
	"P1                P4
	  |_ P2           \_ B
	  	|_ P3 
	  	|_A
	  |_ B
	"
	  
		
	self 
		should: [p2 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		!

----SNAPSHOT----(25 May 2021 12:52:16) CuisUniversity-4532.image priorSource: 17150241!
!PortfolioTest methodsFor: 'add restrictions' stamp: 'DB 5/25/2021 12:52:20' prior: 50867671!
test17CannotAddAPortfolioWithAnExistingAccountInTheMiddleOfTheTree

	| p1 p2 p3 a b p4 |
		
	p1 := Portfolio new.
	p2 := Portfolio new.
	p3 := Portfolio new.
	p4 := Portfolio new.
	
	a := ReceptiveAccount new.
	b := ReceptiveAccount new.
	
	p1 add: p3.
	p1 add: p2.
	p2 add: a.
	p3 add: b.
	p4 add: p3.
	
	"P1                P4
	  |_ P2           \_ B
	  	|_ P3 
	  	|_A
	  |_ B
	"
	  
		
	self 
		should: [p2 add: p4 ] 
		raise: Error  
		withMessageText: [Portfolio cannotAddAccountErrorDescription.]
		! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 12:52:41' prior: 50865863 overrides: 50866771!
allLeaves

	| rootContainers leafContainer |
	rootContainers := OrderedCollection new.
	
	self roots: rootContainers.
	
	leafContainer := OrderedCollection new.
	rootContainers  do: [ :aRoot | aRoot leaves: leafContainer].
	
	^leafContainer 
! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 12:54:16' prior: 50867729 overrides: 50866771!
allLeaves

	|  leafContainer |
	
	
	leafContainer := OrderedCollection new.
	self allRoots  do: [ :aRoot | aRoot leaves: leafContainer].
	
	^leafContainer 
! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 12:54:18' prior: 50867741 overrides: 50866771!
allLeaves

	|  leafContainer |
	
	leafContainer := OrderedCollection new.
	self allRoots  do: [ :aRoot | aRoot leaves: leafContainer].
	
	^leafContainer 
! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 12:54:35' prior: 50867750 overrides: 50866771!
allLeaves

	| rootContainers leafContainer |
	rootContainers := OrderedCollection new.
	
	self roots: rootContainers.
	
	leafContainer := OrderedCollection new.
	rootContainers  do: [ :aRoot | aRoot leaves: leafContainer].
	
	^leafContainer 
! !
!Portfolio methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 12:55:02' prior: 50867759 overrides: 50866771!
allLeaves

	| leafContainer |
	
	leafContainer := OrderedCollection new.
	self allRoots  do: [ :aRoot | aRoot leaves: leafContainer].
	
	^leafContainer 
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 12:55:04'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioTree stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test06HasRegistrerOfAPortfoloTree stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test12TwoPortfolioWithTheSameAccountCannotBeAdded stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddAnAccounInTheRoottIfThereExistAsALeaf stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test14CannotDuplicateALeaf stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test15CannotDuplicateALeafInADeepTree stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAPortfolioWithAnExistingAccount stamp: 'DB 5/25/2021 12:55:05'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAPortfolioWithAnExistingAccountInTheMiddleOfTheTree stamp: 'DB 5/25/2021 12:55:05'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'DB 5/25/2021 12:55:27' prior: 50860379 overrides: 50866753!
hasRegistered: aTransaction

	^accounts anySatisfy: [:account | account hasRegistered: aTransaction].! !
!ReceptiveAccount methodsFor: 'assertions - private' stamp: 'DB 5/25/2021 12:56:15' prior: 50865920 overrides: 50866771!
allLeaves

	^ OrderedCollection with: self ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test02APortfolioWithAnAccountHasTheSameBalance stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioTree stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHaveNotAnyTransaction stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithAnReceptiveAccountHaveAccountTransaction stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test06HasRegistrerOfAPortfoloTree stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioReturnsEmptyTransactions stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithAnAccountIncludesDepositTransaction stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithMoreThanOneAccountMustIncludesAllTransactions stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test10CannotAddSameAccountTwice stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test11CyclesCannotBeGenerated stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test12TwoPortfolioWithTheSameAccountCannotBeAdded stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test13CannotAddAnAccounInTheRoottIfThereExistAsALeaf stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test14CannotDuplicateALeaf stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test15CannotDuplicateALeafInADeepTree stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddAPortfolioWithAnExistingAccount stamp: 'DB 5/25/2021 12:56:19'!
PASSED!

!testRun: #PortfolioTest #test17CannotAddAPortfolioWithAnExistingAccountInTheMiddleOfTheTree stamp: 'DB 5/25/2021 12:56:19'!
PASSED!
!Account methodsFor: 'balance' stamp: 'DB 5/25/2021 12:57:17' prior: 50860250!
balance

	self subclassResponsibility ! !

----SNAPSHOT----(25 May 2021 13:02:00) CuisUniversity-4532.image priorSource: 17153766!

----SNAPSHOT----(25 May 2021 13:02:54) CuisUniversity-4532.image priorSource: 17160457!

----QUIT----(25 May 2021 13:03:01) CuisUniversity-4532.image priorSource: 17160546!